program -> (declaration)* eof

declaration -> funDecl | structDecl | varDecl | statement

funDecl -> "fn" function
function -> identifier "(" parameters? ")" block
parameters -> identifier ( "," identifier )*

// TODO: ADD (varDecl ";")*
structDecl -> "struct" IDENTIFIER "{" funDecl* "}"
varDecl -> "let" IDENTIFIER ( = expression)?

statement -> (exprStmt | ifStatement | switchStatament | forStatement | whileStatement | returnStatement | blockStatement | breakStatement | continueStatement) ";"

exprStatement -> expression
ifStatement -> "if" condition block ("elif" condition block)* "else" block
switchStatament -> "switch" condition "{" (case)* default? "}"
case -> "case" ":" (declaration)*
default -> "default" ":" (declaration)*
condition -> "(" expression ")"

// TODO: ADD expression for initialization
forStatement -> "for" "(" varDecl ";" expression ";" expression ")" block
whileStatement -> "while" "(" expression ")" block

returnStatement -> "return" expression?
breakStatement -> "break"
continueStatement -> "continue"

blockStatement -> "{" (declaration)* "}"


expression -> assignment

assignment -> ( call "." )? identifier assignment_operator assignment | logic_or
assignment_operator ->"=" | "+=" | "-=" | "*=" | "/=" | "%=" | "!=" | "|=" | "&=" | "&&=" | "||="

logic_or -> logic_and ( "or" logic_and )*
logic_and -> equality ( "and" equality )*
equality -> comparison ( ( "!=" | "==" ) comparison )* 
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* 
term -> factor ( ( "-" | "+" ) factor )*
factor -> unary ( ( "/" | "*" | "%") unary )*
unary -> ( "!" | "-" | "++" || "--" ) unary | call
call -> primary ( "(" arguments? ")" | "." identifier )*
primary -> number | string | identifier | boolean | array | "null" | "(" expression ")"

array -> [ (expression ( "," expression )*)? ]
arguments -> expression ( "," expression )*
boolean -> "true" | "false"

